<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.Razor.Workspaces</name>
    </assembly>
    <members>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.ITagHelperResolver.GetTagHelpersAsync(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Razor.ProjectSystem.IProjectSnapshot,System.Threading.CancellationToken)">
            <summary>
             Gets the available <see cref="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor">tag helpers</see> from the specified
             <see cref="T:Microsoft.CodeAnalysis.Project"/> using the given <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.IProjectSnapshot"/> to provide a
             <see cref="T:Microsoft.AspNetCore.Razor.Language.RazorProjectEngine"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.LanguageServerFeatureOptions.IncludeProjectKeyInGeneratedFilePath">
            <summary>
            Whether the file path for the generated C# documents should utilize the project key to
            ensure a unique file path per project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.LanguageServerFeatureOptions.ForceRuntimeCodeGeneration">
            <summary>
            When enabled, design time code will not be generated. All tooling will be using runtime code generation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Workspaces.Protocol.SemanticTokens.ProvideSemanticTokensResponse">
            <summary>
            Transports C# semantic token responses from the Razor LS client to the Razor LS.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.RazorComponentSearchEngine.TryLocateComponentAsync(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor,Microsoft.CodeAnalysis.Razor.ProjectSystem.ISolutionQueryOperations,System.Threading.CancellationToken)">
            <summary>
             Search for a component in a project based on its tag name and fully qualified name.
            </summary>
            <param name="tagHelper">
             A <see cref="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor"/> to find the corresponding Razor component for.
            </param>
            <param name="solutionQueryOperations">
             An <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ISolutionQueryOperations"/> to enumerate project snapshots.
            </param>
            <param name="cancellationToken">
             A token that is checked to cancel work.
            </param>
            <returns>
             The corresponding <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.IDocumentSnapshot"/> if found, <see langword="null"/> otherwise.
            </returns>
            <remarks>
             This method makes several assumptions about the nature of components. First,
             it assumes that a component a given name "Name" will be located in a file
             "Name.razor". Second, it assumes that the namespace the component is present in
             has the same name as the assembly its corresponding tag helper is loaded from.
             Implicitly, this method inherits any assumptions made by TrySplitNamespaceAndType.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             Thrown if <paramref name="tagHelper"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Workspaces.Telemetry.TelemetryThresholds">
            <summary>
            A set of constants used to reduce the telemetry emitted to the set that help us understand
            which LSP is taking the most time in the case that the overall call is lengthy.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.ArgumentCannotBeNullOrEmpty">
            <summary>Value cannot be null or an empty string.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Directive">
            <summary>directive</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.DirectiveSnippetDescription">
            <summary>Insert a directive code snippet
            [Tab] to navigate between elements, [Enter] to complete</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Invalid_Offset">
            <summary>Invalid offset.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.PositionCharacter_Outside_Range">
            <summary>Character '{0}' outside of the {1} range of '{2}' was queried. The document may not be up to date.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatPositionCharacter_Outside_Range(System.Object,System.Object,System.Object)">
            <summary>Character '{0}' outside of the {1} range of '{2}' was queried. The document may not be up to date.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.PositionLine_Outside_Range">
            <summary>Line '{0}' outside of the {1} range of '{2}' was queried. The document may not be up to date.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatPositionLine_Outside_Range(System.Object,System.Object,System.Object)">
            <summary>Line '{0}' outside of the {1} range of '{2}' was queried. The document may not be up to date.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Unknown_mapping_behavior">
            <summary>Unknown mapping behavior</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Unknown_RazorMetaCode">
            <summary>Attempted to visit a RazorMetaCode other than '{' or '}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Format_operation_changed_nonwhitespace">
            <summary>A format operation is being abandoned because it would add or delete non-whitespace content.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Edit_at_adds">
            <summary>Edit at {0} adds the non-whitespace content '{1}'.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatEdit_at_adds(System.Object,System.Object)">
            <summary>Edit at {0} adds the non-whitespace content '{1}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Edit_at_deletes">
            <summary>Edit at {0} deletes the non-whitespace content '{1}'.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatEdit_at_deletes(System.Object,System.Object)">
            <summary>Edit at {0} deletes the non-whitespace content '{1}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Format_operation_changed_diagnostics">
            <summary>A format operation is being abandoned because it would introduce or remove one of more diagnostics.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Diagnostics_before">
            <summary>Diagnostics before:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Diagnostics_after">
            <summary>Diagnostics after:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Language_Services_Missing_Service">
            <summary>Razor language services not configured properly, missing language service '{0}'.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatLanguage_Services_Missing_Service(System.Object)">
            <summary>Razor language services not configured properly, missing language service '{0}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Not_Available_In">
            <summary>Not available in</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.TagHelper_Attribute_Glyph">
            <summary>Razor TagHelper Attribute Glyph</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.TagHelper_Element_Glyph">
            <summary>Razor TagHelper Element Glyph</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Create_Component_FromTag_Title">
            <summary>Create component from tag</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.ExtractTo_CodeBehind_Title">
            <summary>Extract block to code behind</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.ExtractTo_Component_Title">
            <summary>Extract element to new component</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Generate_Async_Event_Handler_Title">
            <summary>Generate Async Event Handler '{0}'</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatGenerate_Async_Event_Handler_Title(System.Object)">
            <summary>Generate Async Event Handler '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.Generate_Event_Handler_Title">
            <summary>Generate Event Handler '{0}'</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Workspaces.Resources.SR.FormatGenerate_Event_Handler_Title(System.Object)">
            <summary>Generate Event Handler '{0}'</summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.CodeActions.UnformattedRemappingCSharpCodeActionResolver">
            <summary>
            Resolves and remaps the code action, without running formatting passes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.CodeActions.UnformattedRemappingCSharpCodeActionResolver.#ctor(Microsoft.CodeAnalysis.Razor.CodeActions.IDelegatedCodeActionResolver,Microsoft.CodeAnalysis.Razor.DocumentMapping.IDocumentMappingService)">
            <summary>
            Resolves and remaps the code action, without running formatting passes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.CodeActions.ICodeActionProvider.ProvideAsync(Microsoft.CodeAnalysis.Razor.CodeActions.RazorCodeActionContext,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Razor.CodeActions.Models.RazorVSInternalCodeAction},System.Threading.CancellationToken)">
            <summary>
            Takes code actions provided by a child language, and provides code actions that should be returned to the LSP client.
            </summary>
            <remarks>
            The list of code actions returned from all providers will be combined together in a list. A null result and an empty
            result are effectively the same.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.CodeActions.Razor.CodeBlockService.CreateFormattedTextEdit(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,System.String,Microsoft.CodeAnalysis.Razor.Formatting.RazorFormattingOptions)">
            <summary>
             Creates a <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.TextEdit"/> that will place the formatted generated method within a @code block in the file.
            </summary>
            <param name="code">
             The <see cref="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument"/> of the file where the generated method will be placed.
            </param>
            <param name="templateWithMethodSignature">
             The skeleton of the generated method where a <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/> should be placed
             anywhere that needs to have some indenting, <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/> anywhere that
             needs some initial indenting.
             It should look something like:
              <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/><see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/>public void MethodName()
              <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/><see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/>{
              <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/><see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/><see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/>throw new NotImplementedException();
              <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/><see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/>}
            </param>
            <param name="options">
             The <see cref="T:Microsoft.CodeAnalysis.Razor.Formatting.RazorFormattingOptions"/> that contains information about indentation.
            </param>
            <returns>
             A <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.TextEdit"/> that will place the formatted generated method within a @code block in the file.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.CodeActions.Razor.CodeBlockService.IsLineEmpty(Microsoft.CodeAnalysis.Text.TextLine)">
            <summary>
             Determines whether the line is empty.
            </summary>
            <param name="textLine">The line to check.</param>
            <returns>true if the line is empty, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Completion.CompletionSortTextHelper">
            <summary>
            Provides pre-filled sort text items to make setting <see cref="P:Microsoft.CodeAnalysis.Razor.Completion.RazorCompletionItem.SortText"/> consistent.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Completion.CompletionSortTextHelper.DefaultSortPriority">
            <summary>
            The default sort priority. Typically this means an LSP client will fall-back to sorting the completion item
            based off of the displayed label in the completion list.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Completion.CompletionSortTextHelper.HighSortPriority">
            <summary>
            A high sort priority. Displayed above <see cref="P:Microsoft.CodeAnalysis.Razor.Completion.CompletionSortTextHelper.DefaultSortPriority"/> items.
            </summary>
            <remarks>
            Note how this property doesn't take into account the actual completion items content. Ultimately this property
            simply returns whitespace. The reason it returns whitespace is that whitespace is alphabetically ordered at the
            top of all other characters. Meaning, for a reasonable client to interpret this sort priority it'll sort by the
            whitespace sort text then will need to fallback to something else to handle collisions (items that have the same
            sort text). The only reasonable fallback will be the display text of a completion item; meaning, we'll have all
            of our "high priority" completion items appear above any other completion item because it'll first sort by whitespace
            and then by display text.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Completion.RazorCompletionItem.#ctor(System.String,System.String,Microsoft.CodeAnalysis.Razor.Completion.RazorCompletionItemKind,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Razor.Completion.RazorCommitCharacter},System.Boolean)">
            <summary>
            Creates a new Razor completion item
            </summary>
            <param name="displayText">The text to display in the completion list</param>
            <param name="insertText">Content to insert when completion item is committed</param>
            <param name="kind">The type of completion item this is. Used for icons and resolving extra information like tooltip text.</param>
            <param name="sortText">A string that is used to alphabetically sort the completion item. If omitted defaults to <paramref name="displayText"/>.</param>
            <param name="commitCharacters">Characters that can be used to commit the completion item.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="displayText"/> or <paramref name="insertText"/> are <c>null</c>.</exception>
            <param name="isSnippet">Indicates whether the completion item's <see cref="P:Microsoft.CodeAnalysis.Razor.Completion.RazorCompletionItem.InsertText"/> is an LSP snippet or not.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Completion.RazorCompletionItem.SortText">
            <summary>
            A string that is used to alphabetically sort the completion item.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Diagnostics.RazorTranslateDiagnosticsService">
            <summary>
            Contains several methods for mapping and filtering Razor and C# diagnostics. It allows for
            translating code diagnostics from one representation into another, such as from C# to Razor.
            </summary>
            <param name="documentMappingService">The <see cref="T:Microsoft.CodeAnalysis.Razor.DocumentMapping.IDocumentMappingService"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Diagnostics.RazorTranslateDiagnosticsService.#ctor(Microsoft.CodeAnalysis.Razor.DocumentMapping.IDocumentMappingService,Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory)">
            <summary>
            Contains several methods for mapping and filtering Razor and C# diagnostics. It allows for
            translating code diagnostics from one representation into another, such as from C# to Razor.
            </summary>
            <param name="documentMappingService">The <see cref="T:Microsoft.CodeAnalysis.Razor.DocumentMapping.IDocumentMappingService"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Diagnostics.RazorTranslateDiagnosticsService.TranslateAsync(Microsoft.CodeAnalysis.Razor.Protocol.RazorLanguageKind,Microsoft.VisualStudio.LanguageServer.Protocol.Diagnostic[],Microsoft.CodeAnalysis.Razor.ProjectSystem.IDocumentSnapshot,System.Threading.CancellationToken)">
            <summary>
             Translates code diagnostics from one representation into another.
            </summary>
            <param name="diagnosticKind">
             The <see cref="T:Microsoft.CodeAnalysis.Razor.Protocol.RazorLanguageKind"/> of the <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> objects
             included in <paramref name="diagnostics"/>.
            </param>
            <param name="diagnostics">
             An array of <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> objects to translate.
            </param>
            <param name="documentSnapshot">
             The <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.IDocumentSnapshot"/> for the code document associated with the diagnostics.
            </param>
            <param name="cancellationToken">A token that can be checked to cancel work.</param>
            <returns>An array of translated diagnostics</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.DocumentMapping.DocumentPositionInfo">
            <summary>
            Represents a position in a document. If <see cref="P:Microsoft.CodeAnalysis.Razor.DocumentMapping.DocumentPositionInfo.LanguageKind"/> is Razor then the position will be
            in the host document, otherwise it will be in the corresponding generated document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.DocumentMapping.DocumentPositionInfo.#ctor(Microsoft.CodeAnalysis.Razor.Protocol.RazorLanguageKind,Microsoft.VisualStudio.LanguageServer.Protocol.Position,System.Int32)">
            <summary>
            Represents a position in a document. If <see cref="P:Microsoft.CodeAnalysis.Razor.DocumentMapping.DocumentPositionInfo.LanguageKind"/> is Razor then the position will be
            in the host document, otherwise it will be in the corresponding generated document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.DocumentMapping.MappingBehavior.Inclusive">
             <summary>
             Inclusive mapping behavior will attempt to map overlapping or intersecting generated ranges with a provided projection range.
            
             Behavior:
                 - Overlaps > 1 generated range = No mapping
                 - Intersects > 1 generated range = No mapping
                 - Overlaps 1 generated range = Will reduce the provided range down to the generated range.
                 - Intersects 1 generated range = Will use the generated range mappings
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.DocumentMapping.MappingBehavior.Inferred">
             <summary>
             Inferred mapping behavior will attempt to map overlapping, intersecting or inbetween generated ranges with a provided projection range.
            
             Behavior: Everything `Inclusive` does +
                 - No mappings in document = No mapping
                 - Inbetween two mappings = Maps inbetween the two generated ranges
                 - Inbetween one mapping and end of document = Maps end of mapping to the end of document
                 - Inbetween beginning of document and one mapping = No mapping
                     o Usually errors flow forward in the document space (not backwards) which is why we don't map this scenario.
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.DocumentMapping.PreferAttributeNameDocumentPositionInfoStrategy">
            <summary>
            A projection strategy that, when given a position that occurs anywhere in an attribute name, will return the projection
            for the position at the start of the attribute name, ignoring any prefix or suffix. eg given any location within the
            attribute "@bind-Value:after", it will return the projection at the point of the word "Value" therein.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.FoldingRanges.FoldingRangeService.FixFoldingRangeStart(Microsoft.VisualStudio.LanguageServer.Protocol.FoldingRange,Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)">
            <summary>
            Fixes the start of a range so that the offset of the first line is the last character on that line. This makes
            it so collapsing will still show the text instead of just "..."
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.AddUsingsHelper.TryExtractNamespace(System.String,System.String@,System.String@)">
            <summary>
            Extracts the namespace from a C# add using statement provided by Visual Studio
            </summary>
            <param name="csharpAddUsing">Add using statement of the form `using System.X;`</param>
            <param name="namespace">Extract namespace `System.X`</param>
            <param name="prefix">The prefix to show, before the namespace, if any</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingContext.GetIndentations">
            <summary>A Dictionary of int (line number) to IndentationContext.</summary>
            <remarks>
            Don't use this to discover the indentation level you should have, use
            <see cref="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingContext.TryGetIndentationLevel(System.Int32,System.Int32@)"/> which operates on the position rather than just the line.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingContext.GetIndentationLevelString(System.Int32)">
            <summary>
            Generates a string of indentation based on a specific indentation level. For instance, inside of a C# method represents 1 indentation level. A method within a class would have indentaiton level of 2 by default etc.
            </summary>
            <param name="indentationLevel">The indentation level to represent</param>
            <returns>A whitespace string representing the indentation level based on the configuration.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingContext.GetIndentationOffsetForLevel(System.Int32)">
            <summary>
            Given a level, returns the corresponding offset.
            </summary>
            <param name="level">A value representing the indentation level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingContext.DEBUG_ValidateComponents(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)">
            <summary>
            It can be difficult in the testing infrastructure to correct constructs input files that work consistently across
            context changes, so this method validates that the number of components isn't changing due to lost tag help info.
            Without this guarantee its hard to reason about test behaviour/failures.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.AddIndentationToMethod(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Adds indenting to the method.
            </summary>
            <param name="method">
             The method to add indenting to. The method should be marked with <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/> where an indent is wanted
            </param>
            <param name="tabSize">
             The indentation size
            </param>
            <param name="insertSpaces">
             Use spaces for indentation.
            </param>
            <param name="startingIndent">
             The size of the any existing indent.
            </param>
            <returns>The indented method.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.AddIndentationToMethod(System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
             Adds indenting to the method.
            </summary>
            <param name="method">
             The method to add indenting to. The method should be marked with <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/> where an indent is wanted
             and <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/> where some initial indent is needed.
            </param>
            <param name="tabSize">
             The indentation size
            </param>
            <param name="insertSpaces">
            Use spaces for indentation.
            </param>
            <param name="startAbsoluteIndex">
             The absolute index of the beginning of the class in the C# file the method will be added to.
            </param>
            <param name="numCharacterBefore">
             The number of characters on the line before where startAbsoluteIndex is in the source.
            </param>
            <param name="source">
             The contents of the C# file.
            </param>
            <returns>The indented method.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.AddIndentationToMethod(System.String,System.Int32,System.Boolean,System.Int32,System.Int32,Microsoft.AspNetCore.Razor.Language.RazorSourceDocument)">
            <summary>
             Adds indenting to the method.
            </summary>
            <param name="method">
             The method to add indenting to. The method should be marked with <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.Indent"/> where an indent is wanted
             and <see cref="F:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.InitialIndent"/> where some initial indent is needed.
            </param>
            <param name="tabSize">
             The indentation size
            </param>
            <param name="insertSpaces"></param>
            <param name="startAbsoluteIndex">
             The absolute index of the beginning of the code block in the Razor file where the method will be added to.
            </param>
            <param name="numCharacterBefore">
             The number of characters on the line before where startAbsoluteIndex is in the source.
            </param>
            <param name="source">
             The <see cref="T:Microsoft.AspNetCore.Razor.Language.RazorSourceDocument"/> of the razor file the method is being added to.
            </param>
            <returns>The indented method.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.GetIndentationString(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Given a <paramref name="indentation"/> amount of characters, generate a string representing the configured indentation.
            </summary>
            <param name="indentation">An amount of characters to represent the indentation.</param>
            <param name="insertSpaces">Whether spaces are used for indentation.</param>
            <param name="tabSize">The size of a tab and indentation.</param>
            <returns>A whitespace string representation indentation.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.NaivelyUnindentSubstring(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,System.Text.StringBuilder)">
             <summary>
             Unindents a span of text with a few caveats:
            
             1. This assumes consistency in tabs/spaces for starting whitespace per line
             2. This doesn't format the text, just attempts to remove leading whitespace in a uniform way
             3. It will never remove non-whitespace
            
             This was made with extracting code into a new file in mind because it's not trivial to format that text and make
             sure the indentation is right. Use with caution.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.FormattingUtilities.FixHtmlTextEdits(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.VisualStudio.LanguageServer.Protocol.TextEdit[])">
            <summary>
            Sometimes the Html language server will send back an edit that contains a tilde, because the generated
            document we send them has lots of tildes. In those cases, we need to do some extra work to compute the
            minimal text edits
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Formatting.IndentationContext.ExistingIndentation">
            <summary>
            The number of characters of indentation there are on this line
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Formatting.IndentationContext.ExistingIndentationSize">
            <summary>
            The amount of visual indentation there is on this line, taking into account tab size
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Formatting.CSharpFormattingPass">
            <summary>
            Gets edits in Razor files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.CSharpFormattingPass.#ctor(Microsoft.CodeAnalysis.Razor.DocumentMapping.IDocumentMappingService,Microsoft.CodeAnalysis.Razor.Workspaces.IHostServicesProvider,Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory)">
            <summary>
            Gets edits in Razor files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Formatting.CSharpOnTypeFormattingPass">
            <summary>
            Gets edits in C# files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.CSharpOnTypeFormattingPass.#ctor(Microsoft.CodeAnalysis.Razor.DocumentMapping.IDocumentMappingService,Microsoft.CodeAnalysis.Razor.Workspaces.IHostServicesProvider,Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory)">
            <summary>
            Gets edits in C# files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Formatting.HtmlFormattingPass">
            <summary>
            Gets edits in Razor files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.HtmlFormattingPass.#ctor(Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory)">
            <summary>
            Gets edits in Razor files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Formatting.HtmlOnTypeFormattingPass">
            <summary>
            Gets edits in Html files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.HtmlOnTypeFormattingPass.#ctor(Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory)">
            <summary>
            Gets edits in Html files, and returns edits to Razor files, with nicely formatted Html
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Formatting.RazorFormattingService.NormalizeLineEndings(Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange})">
            <summary>
            This method counts the occurrences of CRLF and LF line endings in the original text. 
            If LF line endings are more prevalent, it removes any CR characters from the text changes 
            to ensure consistency with the LF style.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.GoToDefinition.IRazorComponentDefinitionService">
            <summary>
             Go to Definition support for Razor components.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.AbstractRazorProjectInfoDriver.StartInitialization">
            <summary>
            MUST be called in the constructor of any <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.AbstractRazorProjectInfoDriver"/> descendent
            to kick off initialization.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.DocumentSnapshot.GetOrParseCSharpSyntaxTree(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,System.Threading.CancellationToken)">
            <summary>
             Retrieves a cached Roslyn <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/> from the generated C# document.
             If a tree has not yet been cached, a new one will be parsed and added to the cache.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.Extensions.Matches(Microsoft.AspNetCore.Razor.ProjectSystem.ProjectKey,Microsoft.CodeAnalysis.Project)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Microsoft.AspNetCore.Razor.ProjectSystem.ProjectKey"/> matches the given <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.HostProject.FilePath">
            <summary>
            Gets the full path to the .csproj file for this project
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.HostProject.IntermediateOutputPath">
            <summary>
            Gets the full path to the folder under 'obj' where the project.razor.bin file will live
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.HostProject.DisplayName">
            <summary>
            An extra user-friendly string to show in the VS navigation bar to help the user, of the form "{ProjectFileName} ({Flavor})"
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.IDocumentSnapshot.GetCSharpSyntaxTreeAsync(System.Threading.CancellationToken)">
            <summary>
             Gets the Roslyn syntax tree for the generated C# for this Razor document
            </summary>
            <remarks>
             ⚠️ Should be used sparingly in language server scenarios.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.IProjectSnapshot.FilePath">
            <summary>
            Gets the full path to the .csproj file for this project
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.IProjectSnapshot.IntermediateOutputPath">
            <summary>
            Gets the full path to the folder under 'obj' where the project.razor.bin file will live
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.IRazorProjectInfoDriver">
            <summary>
            Handles project changes and notifies listeners of project updates and removal.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.ISolutionQueryOperations.GetProjects">
            <summary>
            Returns all Razor project snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.ISolutionQueryOperations.GetProjectsContainingDocument(System.String)">
            <summary>
             Returns all Razor valid project snapshots that contain the given document file path.
            </summary>
            <param name="documentFilePath">A file path to a Razor document.</param>
            <remarks>
             In multi-targeting scenarios, this will return a project for each target that the
             contains the document.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshot.GetRelatedDocuments(Microsoft.CodeAnalysis.Razor.ProjectSystem.IDocumentSnapshot)">
            <summary>
            If the provided document is an import document, gets the other documents in the project
            that include directives specified by the provided document. Otherwise returns an empty
            list.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager._projectMap">
            <summary>
            A map of <see cref="T:Microsoft.AspNetCore.Razor.ProjectSystem.ProjectKey"/> to <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager.Entry"/>, which wraps a <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState"/>
            and lazily creates a <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshot"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager._openDocumentSet">
            <summary>
            The set of open documents.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager._isSolutionClosing">
            <summary>
            Determines whether or not the solution is closing.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager.#ctor(Microsoft.AspNetCore.Razor.ProjectEngineHost.IProjectEngineFactoryProvider,Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory,System.Action{Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager.Updater})">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectSnapshotManager"/>.
            </summary>
            <param name="projectEngineFactoryProvider">The <see cref="T:Microsoft.AspNetCore.Razor.ProjectEngineHost.IProjectEngineFactoryProvider"/> to
            use when creating <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.CodeAnalysis.Razor.Logging.ILoggerFactory"/> to use.</param>
            <param name="initializer">An optional callback to set up the initial set of projects and documents.
            Note that this is called during construction, so it does not run on the dispatcher and notifications
            will not be sent.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState.Version">
            <summary>
            Gets the version of this project, INCLUDING content changes. The <see cref="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState.Version"/> is
            incremented for each new <see cref="T:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState"/> instance created.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState.DocumentCollectionVersion">
            <summary>
            Gets the version of this project, NOT INCLUDING computed or content changes. The
            <see cref="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState.DocumentCollectionVersion"/> is incremented each time the configuration changes or
            a document is added or removed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.ProjectSystem.ProjectState.ProjectWorkspaceStateVersion">
            <summary>
            Gets the version of this project based on the project workspace state, NOT INCLUDING content
            changes. The computed state is guaranteed to change when the configuration or tag helpers
            change.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.CodeActions.VSCodeActionParams">
            <summary>
            We can't use the CodeActionParams defined in MS.VS.LS.Protocol, so need our own version, because the platform only
            converts on read, not write. ie, if it gets a request for a CodeActionParams, it will happily deserialize the Context
            property to VSInternalCodeActionContext, but in our case we need to send a request to our CustomMessageTarget, and so
            we need the Context property serialized as the internal type.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.CustomMessageNames">
            <summary>
            This lists all of the LSP methods that we support  that are not part of the LSP spec, or LSP++
            </summary>
            <remarks>
            Handlers for these methods live in either the RazorCustomMessageTarget class in this repo for VS,
            or in various TypeScript files in https://github.com/dotnet/vscode-csharp for VS Code.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.DocumentPresentation.RazorTextPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/_vs_textPresentation request, plus
            a host document version.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.DocumentPresentation.RazorUriPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/_vs_uriPresentation request, plus
            a host document version.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.DocumentPresentation.TextPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/_vs_textPresentation request.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.DocumentPresentation.UriPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/_vs_uriPresentation request.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Protocol.IClientCapabilitiesService.CanGetClientCapabilities">
            <summary>
            Indicates whether capabilities have been sent by the client, and therefore where a call to ClientCapabilities would succeed
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.IDelegatedParams">
            <summary>
            Interface for delegated params that enables sharing of code in RazorCustomMessageTarget
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Protocol.JsonHelpers.TryConvertFromJObject(System.Object)">
            <summary>
            Normalizes data from JObject to JsonElement as thats what we expect to process
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Protocol.JsonHelpers.TryConvertBackToJObject(System.Object)">
            <summary>
            Converts from JObject back to JsonElement, but only if the original conversion was done with <see cref="M:Microsoft.CodeAnalysis.Razor.Protocol.JsonHelpers.TryConvertFromJObject(System.Object)"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.Protocol.LanguageServerConstants.CodeActions.UnformattedRemap">
            <summary>
            Remaps without formatting the resolved code action edit
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Razor.Protocol.LanguageServerConstants.CodeActions.Default">
            <summary>
            Remaps and formats the resolved code action edit
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.RazorTextChange">
            <summary>
            A representation of a Roslyn TextChange that can be serialized with System.Text.Json. Also needs to match
            https://github.com/dotnet/vscode-csharp/blob/main/src/razor/src/rpc/serverTextChange.ts for VS Code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.RazorTextSpan">
            <summary>
            A representation of a Roslyn TextSpan that can be serialized with System.Text.Json. Also needs to match
            https://github.com/dotnet/vscode-csharp/blob/main/src/razor/src/rpc/serverTextSpan.ts for VS Code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Protocol.TextDocumentIdentifierAndVersion">
            <summary>
            A serializable pairing of <see cref="P:Microsoft.CodeAnalysis.Razor.Protocol.TextDocumentIdentifierAndVersion.TextDocumentIdentifier"/> and a version. This
            should be used over <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.VersionedTextDocumentIdentifier"/> because when serializing
            and deserializing that class, if the <see cref="P:Microsoft.CodeAnalysis.Razor.Protocol.TextDocumentIdentifierAndVersion.TextDocumentIdentifier"/> is a <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.VSTextDocumentIdentifier"/>
            it will lose the project context information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Protocol.TextDocumentIdentifierAndVersion.#ctor(Microsoft.VisualStudio.LanguageServer.Protocol.TextDocumentIdentifier,System.Int32)">
            <summary>
            A serializable pairing of <see cref="P:Microsoft.CodeAnalysis.Razor.Protocol.TextDocumentIdentifierAndVersion.TextDocumentIdentifier"/> and a version. This
            should be used over <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.VersionedTextDocumentIdentifier"/> because when serializing
            and deserializing that class, if the <see cref="P:Microsoft.CodeAnalysis.Razor.Protocol.TextDocumentIdentifierAndVersion.TextDocumentIdentifier"/> is a <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.VSTextDocumentIdentifier"/>
            it will lose the project context information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.RazorSyntaxFacts.TryGetAttributeNameAbsoluteIndex(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,System.Int32,System.Int32@)">
            <summary>
            Given an absolute index positioned in an attribute, finds the absolute index of the part of the
            attribute that represents the attribute name. eg. for @bi$$nd-Value it will find the absolute index
            of "Value"
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.RazorSyntaxFacts.TryGetFullAttributeNameSpan(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,System.Int32,Microsoft.CodeAnalysis.Text.TextSpan@)">
            <summary>
            Gets the span of the entire "name" part of an attribute, if the <paramref name="absoluteIndex"/> is anywhere within it,
            including any prefix or suffix
            For example given "&lt;Goo @bi$$nd-Value:after="val" /&gt;" with the cursor at $$, it would return the span from "@" to "r".
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Remote.IRemoteJsonService">
            <summary>
            Marker interface to indicate that an OOP service should use Json for communication
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.SemanticTokens.IRazorSemanticTokensInfoService.GetSemanticTokensAsync(Microsoft.CodeAnalysis.Razor.ProjectSystem.DocumentContext,Microsoft.CodeAnalysis.Text.LinePositionSpan,System.Boolean,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the int array representing the semantic tokens for the given range.
            </summary>
            <remarks>See https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens for details about the int array</remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.SemanticTokens.SemanticRange.FromRazor">
            <summary>
            If we produce a token, and a delegated server produces a token, we want to prefer ours, so we use this flag to help our
            sort algorithm, that way we can avoid the perf hit of actually finding duplicates, and just take the first instance that
            covers a range.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Razor.Settings.ClientSettings">
            <summary>
            Settings that are set and handled on the client, but needed by the LSP Server to function correctly. When these are
            updated a workspace/didchangeconfiguration should be sent from client to the server. Then the server requests
            workspace/configuration to get the latest settings. For VS, the razor protocol also handles this and serializes the
            settings back to the server.
            </summary>
            <param name="ClientSpaceSettings"></param>
            <param name="ClientCompletionSettings"></param>
            <param name="AdvancedSettings"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Settings.ClientSettings.#ctor(Microsoft.CodeAnalysis.Razor.Settings.ClientSpaceSettings,Microsoft.CodeAnalysis.Razor.Settings.ClientCompletionSettings,Microsoft.CodeAnalysis.Razor.Settings.ClientAdvancedSettings)">
            <summary>
            Settings that are set and handled on the client, but needed by the LSP Server to function correctly. When these are
            updated a workspace/didchangeconfiguration should be sent from client to the server. Then the server requests
            workspace/configuration to get the latest settings. For VS, the razor protocol also handles this and serializes the
            settings back to the server.
            </summary>
            <param name="ClientSpaceSettings"></param>
            <param name="ClientCompletionSettings"></param>
            <param name="AdvancedSettings"></param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Settings.ClientSettings.ClientSpaceSettings">
            <summary></summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Settings.ClientSettings.ClientCompletionSettings">
            <summary></summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Razor.Settings.ClientSettings.AdvancedSettings">
            <summary></summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.Tooltip.Extensions.GetProjectAvailabilityAsync(Microsoft.CodeAnalysis.Razor.ProjectSystem.ISolutionQueryOperations,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Returns the Razor projects that contain the document specified by file path and a <see cref="T:System.Boolean"/>
             that indicates whether or not the given tag helper is available within a project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Razor.UriExtensions.GetDocumentFilePath(System.Uri)">
            <summary>
             Converts the specified <see cref="T:System.Uri"/> into a file path that matches
             a Roslyn <see cref="P:Microsoft.CodeAnalysis.TextDocument.FilePath"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.SourceTextExtensions.GetEncompassingTextChangeRange(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Gets the minimal range of text that changed between the two versions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.SourceTextExtensions.TryGetLastNonWhitespaceOffset(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,System.Int32@)">
            <summary>
             <para>
              Given the source text and the current span, we start at the ending span location and iterate towards the start
              until we've reached a non-whitespace character.
             </para>
             <para>
              For instance, "  abcdef  " would have a last non-whitespace offset of 7 to correspond to the character 'f'.
             </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.SourceTextExtensions.MinimizeTextChanges(Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange})">
            <summary>
            Applies the set of edits specified, and returns the minimal set needed to make the same changes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.SourceTextExtensions.MinimizeTextChanges(Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.Text.SourceText@)">
            <summary>
            Applies the set of edits specified, and returns the minimal set needed to make the same changes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.SourceTextExtensions.HasLFLineEndings(Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Determines if the given <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> has more LF line endings ('\n') than CRLF line endings ('\r\n').
            </summary>
            <param name="text">The <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> is deemed to use LF line endings; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Language.Syntax.RazorSyntaxNodeExtensions.GetOutermostNode(Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNode)">
            <summary>
            Walks up the tree through the <paramref name="owner"/>'s parents to find the outermost node that starts at the same position.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Language.Syntax.RazorSyntaxNodeExtensions.FindInnermostNode(Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds the innermost SyntaxNode for a given location in source, within a given node.
            </summary>
            <param name="node">The parent node to search inside.</param>
            <param name="index">The location to find the innermost node at.</param>
            <param name="includeWhitespace">Whether to include whitespace in the search.</param>
            <param name="walkMarkersBack">When true, if there are multiple <see cref="F:Microsoft.AspNetCore.Razor.Language.SyntaxKind.Marker"/> tokens in a single location, return the parent node of the
            first one in the tree.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.TextDifferencing.SourceTextDiffer.RentArray(System.Int32)">
            <summary>
             Rents a char array of at least <paramref name="minimumLength"/> from the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.TextDifferencing.SourceTextDiffer.ReturnArray(System.Char[],System.Boolean)">
            <summary>
             Returns a char array to the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.TextDifferencing.SourceTextDiffer.EnsureBuffer(System.Char[]@,System.Int32)">
            <summary>
             Ensures that <paramref name="array"/> references a char array of at least <paramref name="minimumLength"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.TextDifferencing.TextDiffer.IntArray">
            <summary>
             This is a simple wrapper for either a single small int array, or
             an array of int array pages.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.TextDifferencing.TextDiffer.IntArray.RentArray(System.Int32)">
            <summary>
             Rents an int array of at least <paramref name="minimumLength"/> from the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.TextDifferencing.TextDiffer.IntArray.ReturnArray(System.Int32[],System.Boolean)">
            <summary>
             Returns an int array to the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Protocol.VsLspExtensions.WithUri(Microsoft.VisualStudio.LanguageServer.Protocol.TextDocumentIdentifier,System.Uri)">
            <summary>
            Returns a copy of the passed in <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.TextDocumentIdentifier"/> with the passed in <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Protocol.VsLspFactory.DefaultPosition">
            <summary>
             Returns a <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.Position"/> for line 0 and character 0.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Protocol.VsLspFactory.DefaultRange">
            <summary>
             Returns a <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.Position"/> for starting line 0 and character 0,
             and ending line 0 and character 0.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.RoslynLspExtensions.WithUri(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.Uri)">
            <summary>
            Returns a copy of the passed in <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> with the passed in <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RoslynLspFactory.DefaultPosition">
            <summary>
             Returns a <see cref="T:Roslyn.LanguageServer.Protocol.Position"/> for line 0 and character 0.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RoslynLspFactory.DefaultRange">
            <summary>
             Returns a <see cref="T:Roslyn.LanguageServer.Protocol.Position"/> for starting line 0 and character 0,
             and ending line 0 and character 0.
            </summary>
        </member>
    </members>
</doc>
